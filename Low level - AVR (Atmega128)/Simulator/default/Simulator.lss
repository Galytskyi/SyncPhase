
Simulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021e  00800100  00000686  0000071a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000686  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000152  0080031e  0080031e  00000938  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000028d  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  00000c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000046b  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a8  00000000  00000000  0000183d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ca  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014b  00000000  00000000  00002462  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 04 02 	jmp	0x408	; 0x408 <__vector_21>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	14 e0       	ldi	r17, 0x04	; 4
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b3 e0       	ldi	r27, 0x03	; 3
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 37       	cpi	r26, 0x70	; 112
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 76 00 	call	0xec	; 0xec <main>
  c6:	0c 94 41 03 	jmp	0x682	; 0x682 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <delay>:
#include "EEPROM.h"

// ------------------------------------------------------------------------------

void delay(WORD ms)
{
  ce:	08 c0       	rjmp	.+16     	; 0xe0 <delay+0x12>
	while(ms--)
	{	
		WORD tick = 2000; 
		while(tick --)
			asm volatile ( "nop\n" ::);
  d0:	00 00       	nop
void delay(WORD ms)
{
	while(ms--)
	{	
		WORD tick = 2000; 
		while(tick --)
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	30 40       	sbci	r19, 0x00	; 0
  d6:	4f ef       	ldi	r20, 0xFF	; 255
  d8:	2f 3f       	cpi	r18, 0xFF	; 255
  da:	34 07       	cpc	r19, r20
  dc:	c9 f7       	brne	.-14     	; 0xd0 <delay+0x2>
  de:	01 97       	sbiw	r24, 0x01	; 1

// ------------------------------------------------------------------------------

void delay(WORD ms)
{
	while(ms--)
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	19 f0       	breq	.+6      	; 0xea <delay+0x1c>
  e4:	20 ed       	ldi	r18, 0xD0	; 208
  e6:	37 e0       	ldi	r19, 0x07	; 7
  e8:	f4 cf       	rjmp	.-24     	; 0xd2 <delay+0x4>
  ea:	08 95       	ret

000000ec <main>:
	}
		
}

int main(void)
{
  ec:	ff 92       	push	r15
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
	sei();
  f2:	78 94       	sei

	// Инициализаци COM-порта
	InitUSART();
  f4:	0e 94 ce 00 	call	0x19c	; 0x19c <InitUSART>

	// Назначаем вход/выход портов
	
	DDRC 	= 0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	84 bb       	out	0x14, r24	; 20
	DDRG 	= 0xFF;
  fc:	80 93 64 00 	sts	0x0064, r24

	// Оптравляем состояние портов
	SendPortIO();
 100:	0e 94 c0 02 	call	0x580	; 0x580 <SendPortIO>
	SendEepromParam();
 104:	0e 94 b6 01 	call	0x36c	; 0x36c <SendEepromParam>

	//Запускаем диагностику портов
	StartDiagPorts();
 108:	0e 94 cc 01 	call	0x398	; 0x398 <StartDiagPorts>
		SendStr("Если \"Параметр 3\" не равен 0 Горит 3-й вход порта С", MSG_TYPE_STR_USUAL);

		if (EEPROM_PARAM[2])
			PORTC ^= 0x2; 
		else
			PORTC ^= 0x4; 
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	f8 2e       	mov	r15, r24

		SendStr("Если \"Параметр 3\" равен 0 Горит 2-й вход порта С", MSG_TYPE_STR_USUAL);
		SendStr("Если \"Параметр 3\" не равен 0 Горит 3-й вход порта С", MSG_TYPE_STR_USUAL);

		if (EEPROM_PARAM[2])
			PORTC ^= 0x2; 
 110:	02 e0       	ldi	r16, 0x02	; 2
	// Бесконечный цикл для программы
	while(TRUE)
	{
		BYTE nDelay = 0;
		
		SendStr("Ожидаем нажатие кнопки \"Пуск\"", MSG_TYPE_STR_WARNING);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendStr>

		while((PINA & 1) == 0);
 11c:	c8 9b       	sbis	0x19, 0	; 25
 11e:	fe cf       	rjmp	.-4      	; 0x11c <main+0x30>

		SendStr("Кнопка \"Пуск\" нажата", MSG_TYPE_STR_USUAL);
 120:	8e e1       	ldi	r24, 0x1E	; 30
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendStr>

		SendStr("Задержка в секундах \"Параметр 2\" начата", MSG_TYPE_STR_USUAL);
 12a:	83 e3       	ldi	r24, 0x33	; 51
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendStr>
		
		nDelay = EEPROM_PARAM[1];
 134:	10 91 23 03 	lds	r17, 0x0323
 138:	05 c0       	rjmp	.+10     	; 0x144 <main+0x58>
		while(nDelay --)
			delay(1000);
 13a:	88 ee       	ldi	r24, 0xE8	; 232
 13c:	93 e0       	ldi	r25, 0x03	; 3
 13e:	0e 94 67 00 	call	0xce	; 0xce <delay>
 142:	11 50       	subi	r17, 0x01	; 1
		SendStr("Кнопка \"Пуск\" нажата", MSG_TYPE_STR_USUAL);

		SendStr("Задержка в секундах \"Параметр 2\" начата", MSG_TYPE_STR_USUAL);
		
		nDelay = EEPROM_PARAM[1];
		while(nDelay --)
 144:	11 23       	and	r17, r17
 146:	c9 f7       	brne	.-14     	; 0x13a <main+0x4e>
			delay(1000);
		
		SendStr("Задержка в секундах \"Параметр 2\" окончена", MSG_TYPE_STR_USUAL);
 148:	8b e5       	ldi	r24, 0x5B	; 91
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendStr>

		SendStr("Если \"Параметр 3\" равен 0 Горит 2-й вход порта С", MSG_TYPE_STR_USUAL);
 152:	85 e8       	ldi	r24, 0x85	; 133
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendStr>
		SendStr("Если \"Параметр 3\" не равен 0 Горит 3-й вход порта С", MSG_TYPE_STR_USUAL);
 15c:	86 eb       	ldi	r24, 0xB6	; 182
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendStr>

		if (EEPROM_PARAM[2])
 166:	80 91 24 03 	lds	r24, 0x0324
 16a:	88 23       	and	r24, r24
 16c:	19 f0       	breq	.+6      	; 0x174 <main+0x88>
			PORTC ^= 0x2; 
 16e:	85 b3       	in	r24, 0x15	; 21
 170:	80 27       	eor	r24, r16
 172:	02 c0       	rjmp	.+4      	; 0x178 <main+0x8c>
		else
			PORTC ^= 0x4; 
 174:	85 b3       	in	r24, 0x15	; 21
 176:	8f 25       	eor	r24, r15
 178:	85 bb       	out	0x15, r24	; 21


		SendStr("Задержка в секундах \"Параметр 2\" окончена", MSG_TYPE_STR_USUAL);
 17a:	8b e5       	ldi	r24, 0x5B	; 91
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendStr>
		SendStr("Тушим порт С", MSG_TYPE_STR_USUAL);
 184:	8a ee       	ldi	r24, 0xEA	; 234
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendStr>

		PORTC = 0;
 18e:	15 ba       	out	0x15, r1	; 21

		SendStr("Цикл окончен", MSG_TYPE_STR_ERROR);
 190:	87 ef       	ldi	r24, 0xF7	; 247
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	62 e0       	ldi	r22, 0x02	; 2
 196:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendStr>
 19a:	bb cf       	rjmp	.-138    	; 0x112 <main+0x26>

0000019c <InitUSART>:

void InitUSART()
{	
	// устанвливаем скороть обмена

	UBRR0H = (BYTE)(USART_UBBR_VALUE>>8);
 19c:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (BYTE)USART_UBBR_VALUE;
 1a0:	87 e6       	ldi	r24, 0x67	; 103
 1a2:	89 b9       	out	0x09, r24	; 9

	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);	// разрешаем чтение и передачу 
 1a4:	88 e9       	ldi	r24, 0x98	; 152
 1a6:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (0<<USBS0)|(1<<UCSZ1)|(1<<UCSZ0); 	// 8 bits, no parity, 1 stop bit
 1a8:	86 e0       	ldi	r24, 0x06	; 6
 1aa:	80 93 95 00 	sts	0x0095, r24
}
 1ae:	08 95       	ret

000001b0 <SendByte>:
// ------------------------------------------------------------------------------

void SendByte(BYTE aByte)
{

	while((UCSR0A & (1<<UDRE0)) == 0); 	// ждем пока осводоится\ очередь передачи
 1b0:	5d 9b       	sbis	0x0b, 5	; 11
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <SendByte>
	UDR0 = aByte;  											// переадем байт
 1b4:	8c b9       	out	0x0c, r24	; 12
}
 1b6:	08 95       	ret

000001b8 <ReceiveByte>:

// ------------------------------------------------------------------------------

BYTE ReceiveByte()
{
	while((UCSR0A & (1<<RXC0)) == 0);		// Ждем пока байт будет принят
 1b8:	5f 9b       	sbis	0x0b, 7	; 11
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <ReceiveByte>
	return UDR0;												// возвращаем принятый байт
 1bc:	8c b1       	in	r24, 0x0c	; 12

}
 1be:	08 95       	ret

000001c0 <SendStr>:
}

// ------------------------------------------------------------------------------

void SendStr(char* pStr, BYTE StrType)
{	
 1c0:	fc 01       	movw	r30, r24
	while((UCSR0A & (1<<UDRE0)) == 0); 		// ждем пока осводоится очередь передачи
 1c2:	5d 9b       	sbis	0x0b, 5	; 11
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <SendStr+0x2>
	UDR0 = MSG_TYPE_STR;  								// переадем тип сообщения строка
 1c6:	1c b8       	out	0x0c, r1	; 12

	while((UCSR0A & (1<<UDRE0)) == 0); 		// ждем пока осводоится очередь передачи
 1c8:	5d 9b       	sbis	0x0b, 5	; 11
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <SendStr+0x8>
	UDR0 = StrType;  											// переадем тип стоки
 1cc:	6c b9       	out	0x0c, r22	; 12
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <SendStr+0x18>

	while(*pStr)
	{
		while((UCSR0A & (1<<UDRE0)) == 0);	// ждем пока осводоится очередь передачи
 1d0:	5d 9b       	sbis	0x0b, 5	; 11
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <SendStr+0x10>
		UDR0 = *pStr++; 										// переадем очередной байт сообщения
 1d4:	8c b9       	out	0x0c, r24	; 12
 1d6:	31 96       	adiw	r30, 0x01	; 1
	UDR0 = MSG_TYPE_STR;  								// переадем тип сообщения строка

	while((UCSR0A & (1<<UDRE0)) == 0); 		// ждем пока осводоится очередь передачи
	UDR0 = StrType;  											// переадем тип стоки

	while(*pStr)
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	c9 f7       	brne	.-14     	; 0x1d0 <SendStr+0x10>
	{
		while((UCSR0A & (1<<UDRE0)) == 0);	// ждем пока осводоится очередь передачи
		UDR0 = *pStr++; 										// переадем очередной байт сообщения
	}	

	while((UCSR0A & (1<<UDRE0)) == 0); 		// ждем пока осводоится очередь передачи
 1de:	5d 9b       	sbis	0x0b, 5	; 11
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <SendStr+0x1e>
	UDR0 = 0x0D;  												// переадем байт-признак конец сообщения
 1e2:	8d e0       	ldi	r24, 0x0D	; 13
 1e4:	8c b9       	out	0x0c, r24	; 12



}
 1e6:	08 95       	ret

000001e8 <SendData>:

// ------------------------------------------------------------------------------

void SendData(BYTE* pBuffer, BYTE BufferLength, BYTE DataType)
{
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ec 01       	movw	r28, r24
 1f2:	16 2f       	mov	r17, r22
 1f4:	04 2f       	mov	r16, r20
	while((UCSR0A & (1<<UDRE0)) == 0); 			// ждем пока осводоится очередь передачи
 1f6:	5d 9b       	sbis	0x0b, 5	; 11
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <SendData+0xe>
	UDR0 = MSG_TYPE_DATA;  									// переадем тип сообщения данные
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	8c b9       	out	0x0c, r24	; 12

	while((UCSR0A & (1<<UDRE0)) == 0); 			// ждем пока осводоится очередь передачи
 1fe:	5d 9b       	sbis	0x0b, 5	; 11
 200:	fe cf       	rjmp	.-4      	; 0x1fe <SendData+0x16>
	UDR0 = BufferLength;  									// переадем тип сообщения данные
 202:	1c b9       	out	0x0c, r17	; 12
	
	while((UCSR0A & (1<<UDRE0)) == 0); 			// ждем пока осводоится очередь передачи
 204:	5d 9b       	sbis	0x0b, 5	; 11
 206:	fe cf       	rjmp	.-4      	; 0x204 <SendData+0x1c>
	UDR0 = CalcCRC8(pBuffer, BufferLength); // переадем CRC8
 208:	ce 01       	movw	r24, r28
 20a:	61 2f       	mov	r22, r17
 20c:	0e 94 8a 01 	call	0x314	; 0x314 <CalcCRC8>
 210:	8c b9       	out	0x0c, r24	; 12

	while((UCSR0A & (1<<UDRE0)) == 0); 			// ждем пока осводоится очередь передачи
 212:	5d 9b       	sbis	0x0b, 5	; 11
 214:	fe cf       	rjmp	.-4      	; 0x212 <SendData+0x2a>
	UDR0 = DataType;  											// переадем тип данныx
 216:	0c b9       	out	0x0c, r16	; 12
 218:	05 c0       	rjmp	.+10     	; 0x224 <SendData+0x3c>
	
	while(BufferLength)
	{
		while((UCSR0A & (1<<UDRE0)) == 0);		// ждем пока осводоится очередь передачи
 21a:	5d 9b       	sbis	0x0b, 5	; 11
 21c:	fe cf       	rjmp	.-4      	; 0x21a <SendData+0x32>
		UDR0 = *pBuffer++; 										// переадем очередной байт сообщения
 21e:	89 91       	ld	r24, Y+
 220:	8c b9       	out	0x0c, r24	; 12

		BufferLength --;
 222:	11 50       	subi	r17, 0x01	; 1
	UDR0 = CalcCRC8(pBuffer, BufferLength); // переадем CRC8

	while((UCSR0A & (1<<UDRE0)) == 0); 			// ждем пока осводоится очередь передачи
	UDR0 = DataType;  											// переадем тип данныx
	
	while(BufferLength)
 224:	11 23       	and	r17, r17
 226:	c9 f7       	brne	.-14     	; 0x21a <SendData+0x32>
		UDR0 = *pBuffer++; 										// переадем очередной байт сообщения

		BufferLength --;
	}

	while((UCSR0A & (1<<UDRE0)) == 0); 			// ждем пока осводоится очередь передачи
 228:	5d 9b       	sbis	0x0b, 5	; 11
 22a:	fe cf       	rjmp	.-4      	; 0x228 <SendData+0x40>
	UDR0 = 0x0D;  													// переадем байт-признак конец сообщения
 22c:	8d e0       	ldi	r24, 0x0D	; 13
 22e:	8c b9       	out	0x0c, r24	; 12

}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	08 95       	ret

0000023a <__vector_18>:
// RecvBuffer[2] - CRC8
// RecvBuffer[3] - Data[REQUEST_DATA_LEN];
// RecvBuffer[7] - End - 0x0D

ISR(SIG_UART0_RECV)
{
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	0b b6       	in	r0, 0x3b	; 59
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	1f 93       	push	r17
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	if (RecvIndex >= USART_RECV_BUFFER_LEN)
 262:	90 91 1e 03 	lds	r25, 0x031E
 266:	9f 3f       	cpi	r25, 0xFF	; 255
 268:	d9 f1       	breq	.+118    	; 0x2e0 <__vector_18+0xa6>
	{
		RecvIndex = 0;
		return;
	}

	RecvBuffer[RecvIndex] = UDR0; 
 26a:	8c b1       	in	r24, 0x0c	; 12
 26c:	e9 2f       	mov	r30, r25
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	ee 59       	subi	r30, 0x9E	; 158
 272:	fc 4f       	sbci	r31, 0xFC	; 252
 274:	80 83       	st	Z, r24
	if (RecvBuffer[RecvIndex] == 0x0D)
 276:	8d 30       	cpi	r24, 0x0D	; 13
 278:	b1 f5       	brne	.+108    	; 0x2e6 <__vector_18+0xac>
	{
		// Проверка на размер запроса
		if (RecvIndex != REQUEST_LEN - 1)
 27a:	97 30       	cpi	r25, 0x07	; 7
 27c:	a1 f5       	brne	.+104    	; 0x2e6 <__vector_18+0xac>
			RecvIndex++;
			return;
		}

		// Проверяем CRC8 пришедшего пакета 
		if (RecvBuffer[2] != CalcCRC8(&RecvBuffer[3], REQUEST_DATA_LEN))
 27e:	10 91 64 03 	lds	r17, 0x0364
 282:	85 e6       	ldi	r24, 0x65	; 101
 284:	93 e0       	ldi	r25, 0x03	; 3
 286:	64 e0       	ldi	r22, 0x04	; 4
 288:	0e 94 8a 01 	call	0x314	; 0x314 <CalcCRC8>
 28c:	18 17       	cp	r17, r24
 28e:	41 f5       	brne	.+80     	; 0x2e0 <__vector_18+0xa6>
			return;
		}

		// Запрещаем прерывание по переполнению таймера
		// Выключая тем самым диагностику
		TIMSK	&= ~(1<<TOIE0);	
 290:	87 b7       	in	r24, 0x37	; 55
 292:	8e 7f       	andi	r24, 0xFE	; 254
 294:	87 bf       	out	0x37, r24	; 55


		// REQUEST_GET_PORT_IO -------------------------------------------------------
		if (RecvBuffer[0] == REQUEST_GET_PORT_IO)	
 296:	80 91 62 03 	lds	r24, 0x0362
 29a:	88 23       	and	r24, r24
 29c:	11 f4       	brne	.+4      	; 0x2a2 <__vector_18+0x68>
			SendPortIO();
 29e:	0e 94 c0 02 	call	0x580	; 0x580 <SendPortIO>

		// REQUEST_SET_DISCRETE_STATE ------------------------------------------------
		// RecvBuffer[1] - Номер порта
		// RecvBuffer[2] - Номер входа
		// RecvBuffer[3] - Состояние - Нет(0)/Да(1)
		if (RecvBuffer[0] == REQUEST_SET_DISCRETE_STATE)	
 2a2:	80 91 62 03 	lds	r24, 0x0362
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	41 f4       	brne	.+16     	; 0x2ba <__vector_18+0x80>
			SetDiscreteInputState(RecvBuffer[3], RecvBuffer[4], RecvBuffer[5]);
 2aa:	80 91 65 03 	lds	r24, 0x0365
 2ae:	60 91 66 03 	lds	r22, 0x0366
 2b2:	40 91 67 03 	lds	r20, 0x0367
 2b6:	0e 94 9e 02 	call	0x53c	; 0x53c <SetDiscreteInputState>



		// REQUEST_GET_EEPROM_PARAM --------------------------------------------------
		if (RecvBuffer[0] == REQUEST_GET_EEPROM_PARAM)	
 2ba:	80 91 62 03 	lds	r24, 0x0362
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <__vector_18+0x8c>
			SendEepromParam();
 2c2:	0e 94 b6 01 	call	0x36c	; 0x36c <SendEepromParam>

		// REQUEST_SET_EEPROM_PARAM --------------------------------------------------
		// RecvBuffer[1] - Адрес памяти
		// RecvBuffer[2] - Занчение
		if (RecvBuffer[0] == REQUEST_SET_EEPROM_PARAM)	
 2c6:	80 91 62 03 	lds	r24, 0x0362
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	31 f4       	brne	.+12     	; 0x2da <__vector_18+0xa0>
			SetEepromParam(RecvBuffer[3], RecvBuffer[4]);
 2ce:	80 91 65 03 	lds	r24, 0x0365
 2d2:	60 91 66 03 	lds	r22, 0x0366
 2d6:	0e 94 aa 01 	call	0x354	; 0x354 <SetEepromParam>


		// Разрешаем прерывание по переполнению таймера
		// Включая тем самым диагностику
		TIMSK	|= (1<<TOIE0);
 2da:	87 b7       	in	r24, 0x37	; 55
 2dc:	81 60       	ori	r24, 0x01	; 1
 2de:	87 bf       	out	0x37, r24	; 55


	
		RecvIndex = 0;
 2e0:	10 92 1e 03 	sts	0x031E, r1
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <__vector_18+0xb2>
		
	}
	else
		RecvIndex++; 
 2e6:	9f 5f       	subi	r25, 0xFF	; 255
 2e8:	90 93 1e 03 	sts	0x031E, r25

}
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	1f 91       	pop	r17
 306:	0f 90       	pop	r0
 308:	0b be       	out	0x3b, r0	; 59
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <CalcCRC8>:
	116,	42,		200,	150,	21,		75,		169,	247,	182,	232,	10,		84,		215,	137,	107,	53 
};


BYTE CalcCRC8(BYTE* pBuffer, BYTE BufferLength) 
{
 314:	dc 01       	movw	r26, r24
 316:	e0 e0       	ldi	r30, 0x00	; 0
 318:	07 c0       	rjmp	.+14     	; 0x328 <CalcCRC8+0x14>
  BYTE CRC8 = 0;
  
	while(BufferLength--) 
    CRC8 = TableCRC8[CRC8 ^ *pBuffer++];
 31a:	8d 91       	ld	r24, X+
 31c:	e8 27       	eor	r30, r24
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	ec 5f       	subi	r30, 0xFC	; 252
 322:	fd 4f       	sbci	r31, 0xFD	; 253
 324:	e0 81       	ld	r30, Z
 326:	61 50       	subi	r22, 0x01	; 1

BYTE CalcCRC8(BYTE* pBuffer, BYTE BufferLength) 
{
  BYTE CRC8 = 0;
  
	while(BufferLength--) 
 328:	66 23       	and	r22, r22
 32a:	b9 f7       	brne	.-18     	; 0x31a <CalcCRC8+0x6>
    CRC8 = TableCRC8[CRC8 ^ *pBuffer++];

  return CRC8;
}
 32c:	8e 2f       	mov	r24, r30
 32e:	08 95       	ret

00000330 <InitEepromParam>:


// ------------------------------------------------------------------------------

void InitEepromParam()
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	c0 e0       	ldi	r28, 0x00	; 0
 336:	d0 e0       	ldi	r29, 0x00	; 0
	BYTE Index = 0;
	while(Index < EEPROM_PARAM_COUNT)
		EEPROM_PARAM[Index] = eeprom_read_byte(Index++);
 338:	ce 01       	movw	r24, r28
 33a:	0e 94 2c 03 	call	0x658	; 0x658 <__eerd_byte_m128>
 33e:	fe 01       	movw	r30, r28
 340:	ee 5d       	subi	r30, 0xDE	; 222
 342:	fc 4f       	sbci	r31, 0xFC	; 252
 344:	80 83       	st	Z, r24
 346:	21 96       	adiw	r28, 0x01	; 1
// ------------------------------------------------------------------------------

void InitEepromParam()
{
	BYTE Index = 0;
	while(Index < EEPROM_PARAM_COUNT)
 348:	c0 34       	cpi	r28, 0x40	; 64
 34a:	d1 05       	cpc	r29, r1
 34c:	a9 f7       	brne	.-22     	; 0x338 <InitEepromParam+0x8>
		EEPROM_PARAM[Index] = eeprom_read_byte(Index++);
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <SetEepromParam>:

// ------------------------------------------------------------------------------

void SetEepromParam(BYTE Address, BYTE Value)
{
	eeprom_write_byte(Address, Value);
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 34 03 	call	0x668	; 0x668 <__eewr_byte_m128>
			
	InitEepromParam();
 35a:	0e 94 98 01 	call	0x330	; 0x330 <InitEepromParam>

	SendData(EEPROM_PARAM, EEPROM_PARAM_COUNT, MSG_TYPE_DATA_EEPROM);
 35e:	82 e2       	ldi	r24, 0x22	; 34
 360:	93 e0       	ldi	r25, 0x03	; 3
 362:	60 e4       	ldi	r22, 0x40	; 64
 364:	42 e0       	ldi	r20, 0x02	; 2
 366:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SendData>
}
 36a:	08 95       	ret

0000036c <SendEepromParam>:

// ------------------------------------------------------------------------------

void SendEepromParam()
{
	InitEepromParam();
 36c:	0e 94 98 01 	call	0x330	; 0x330 <InitEepromParam>

	SendData(EEPROM_PARAM, EEPROM_PARAM_COUNT, MSG_TYPE_DATA_EEPROM);
 370:	82 e2       	ldi	r24, 0x22	; 34
 372:	93 e0       	ldi	r25, 0x03	; 3
 374:	60 e4       	ldi	r22, 0x40	; 64
 376:	42 e0       	ldi	r20, 0x02	; 2
 378:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SendData>
}
 37c:	08 95       	ret

0000037e <InitTimer0>:

void InitTimer0()
{
		
	// сбрасываем все флаги прерываний если они были установлены
	TIFR &= ~(1<<OCF0);
 37e:	86 b7       	in	r24, 0x36	; 54
 380:	8d 7f       	andi	r24, 0xFD	; 253
 382:	86 bf       	out	0x36, r24	; 54
	TIFR &= ~(1<<TOV0);
 384:	86 b7       	in	r24, 0x36	; 54
 386:	8e 7f       	andi	r24, 0xFE	; 254
 388:	86 bf       	out	0x36, r24	; 54

	// Разрешаем прерывание по переполнению таймера
	TIMSK	|= (1<<TOIE0);
 38a:	87 b7       	in	r24, 0x37	; 55
 38c:	81 60       	ori	r24, 0x01	; 1
 38e:	87 bf       	out	0x37, r24	; 55

	// 
	TCNT0 = 0x0;
 390:	12 be       	out	0x32, r1	; 50
	// FOC0	WGM00	COM01	COM00	WGM01	CS02	CS01	CS00 - TCCR0
	// WGM00 WGM01  = 00 - нормальный режим работы
	// COM01 COM00	 = 00	- Таймер/счетчик отсоединен от выходного вывода OC0
	// CS02 CS01 CS00 = 111 - СК / 1024
	
	TCCR0 = 0x07;
 392:	87 e0       	ldi	r24, 0x07	; 7
 394:	83 bf       	out	0x33, r24	; 51
}
 396:	08 95       	ret

00000398 <StartDiagPorts>:

// ------------------------------------------------------------------------------

void StartDiagPorts()
{	
	InitTimer0();
 398:	0e 94 bf 01 	call	0x37e	; 0x37e <InitTimer0>
		
	// биты REFS1 REFS0 = 00 - AREF, внутренний VИОН отключен
	// ADLAR = 0 - Бит управления представлением результата преобразования 
	// MUX == 00000 Биты выбора аналогового канала 

	ADMUX = 0x00;
 39c:	17 b8       	out	0x07, r1	; 7
	// ADFR = 0 - Выбор режима автоматического перезапуска АЦП 
	// ADIF = 0 - Флаг прерывания АЦП 
	// ADIE	= 1 - Разрешение прерывания АЦП 
	// ADPS	=	111 - Биты управления предделителем АЦП

	ADCSRA |= (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 39e:	86 b1       	in	r24, 0x06	; 6
 3a0:	8f 6c       	ori	r24, 0xCF	; 207
 3a2:	86 b9       	out	0x06, r24	; 6
void StartDiagPorts()
{	
	InitTimer0();
	//InitTimer2();
	InitADC();
}
 3a4:	08 95       	ret

000003a6 <InitTimer2>:

void InitTimer2()
{
		
	// сбрасываем все флаги прерываний если они были установлены
	TIFR &= ~(1<<OCF2);
 3a6:	86 b7       	in	r24, 0x36	; 54
 3a8:	8f 77       	andi	r24, 0x7F	; 127
 3aa:	86 bf       	out	0x36, r24	; 54
	TIFR &= ~(1<<TOV2);
 3ac:	86 b7       	in	r24, 0x36	; 54
 3ae:	8f 7b       	andi	r24, 0xBF	; 191
 3b0:	86 bf       	out	0x36, r24	; 54


	// Разрешаем прерывание по переполнению таймера
	TIMSK	|= (1<<TOIE2);
 3b2:	87 b7       	in	r24, 0x37	; 55
 3b4:	80 64       	ori	r24, 0x40	; 64
 3b6:	87 bf       	out	0x37, r24	; 55

	// 
	TCNT2 = 0x0;
 3b8:	14 bc       	out	0x24, r1	; 36
	// FOC2	WGM20	COM21	COM20	WGM21	CS22	CS21	CS20 - TCCR2
	// WGM20 WGM21  = 00 - нормальный режим работы
	// COM21 COM20	 = 00	- Таймер/счетчик отсоединен от выходного вывода OC0
	// CS22 CS21 CS20 = 111 - СК / 1024
	
	TCCR2 = 0x04;
 3ba:	84 e0       	ldi	r24, 0x04	; 4
 3bc:	85 bd       	out	0x25, r24	; 37
}
 3be:	08 95       	ret

000003c0 <InitADC>:
		
	// биты REFS1 REFS0 = 00 - AREF, внутренний VИОН отключен
	// ADLAR = 0 - Бит управления представлением результата преобразования 
	// MUX == 00000 Биты выбора аналогового канала 

	ADMUX = 0x00;
 3c0:	17 b8       	out	0x07, r1	; 7
	// ADFR = 0 - Выбор режима автоматического перезапуска АЦП 
	// ADIF = 0 - Флаг прерывания АЦП 
	// ADIE	= 1 - Разрешение прерывания АЦП 
	// ADPS	=	111 - Биты управления предделителем АЦП

	ADCSRA |= (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 3c2:	86 b1       	in	r24, 0x06	; 6
 3c4:	8f 6c       	ori	r24, 0xCF	; 207
 3c6:	86 b9       	out	0x06, r24	; 6

}
 3c8:	08 95       	ret

000003ca <__vector_10>:
// Прерывание по таймеру 2

BYTE Tick2Count = 0;

ISR (TIMER2_OVF_vect)	
{
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	8f 93       	push	r24
 3d6:	9f 93       	push	r25
	if (Tick2Count == 245)
 3d8:	80 91 20 03 	lds	r24, 0x0320
 3dc:	85 3f       	cpi	r24, 0xF5	; 245
 3de:	41 f4       	brne	.+16     	; 0x3f0 <__vector_10+0x26>
	{
		PORTG ^= 0x08;
 3e0:	80 91 65 00 	lds	r24, 0x0065
 3e4:	98 e0       	ldi	r25, 0x08	; 8
 3e6:	89 27       	eor	r24, r25
 3e8:	80 93 65 00 	sts	0x0065, r24
		Tick2Count = 0;
 3ec:	10 92 20 03 	sts	0x0320, r1
	}

	Tick2Count ++;
 3f0:	80 91 20 03 	lds	r24, 0x0320
 3f4:	8f 5f       	subi	r24, 0xFF	; 255
 3f6:	80 93 20 03 	sts	0x0320, r24

}
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <__vector_21>:
// Диагонстика аналоговых входов

BYTE InputADC = 0;

ISR(SIG_ADC)
{
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	0b b6       	in	r0, 0x3b	; 59
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	2f 93       	push	r18
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	ef 93       	push	r30
 422:	ff 93       	push	r31
	pDiagAnalogArray[InputADC++] = ADC;
 424:	20 91 21 03 	lds	r18, 0x0321
 428:	44 b1       	in	r20, 0x04	; 4
 42a:	55 b1       	in	r21, 0x05	; 5
 42c:	82 2f       	mov	r24, r18
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	e0 91 1b 03 	lds	r30, 0x031B
 438:	f0 91 1c 03 	lds	r31, 0x031C
 43c:	e8 0f       	add	r30, r24
 43e:	f9 1f       	adc	r31, r25
 440:	51 83       	std	Z+1, r21	; 0x01
 442:	40 83       	st	Z, r20
 444:	2f 5f       	subi	r18, 0xFF	; 255
 446:	20 93 21 03 	sts	0x0321, r18

	if(InputADC == INPUT_ADC_COUNT)
 44a:	24 30       	cpi	r18, 0x04	; 4
 44c:	11 f4       	brne	.+4      	; 0x452 <__vector_21+0x4a>
		InputADC = 0;
 44e:	10 92 21 03 	sts	0x0321, r1

	ADMUX = InputADC;
 452:	80 91 21 03 	lds	r24, 0x0321
 456:	87 b9       	out	0x07, r24	; 7

	ADCSRA |= (1<<ADSC);
 458:	36 9a       	sbi	0x06, 6	; 6
}
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	2f 91       	pop	r18
 468:	0f 90       	pop	r0
 46a:	0b be       	out	0x3b, r0	; 59
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <GetDiscreteInputsState>:

// ------------------------------------------------------------------------------
// Диагонстика дискретных входов/выходов

void GetDiscreteInputsState()
{
 476:	cf 92       	push	r12
 478:	df 92       	push	r13
 47a:	ef 92       	push	r14
 47c:	ff 92       	push	r15
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	a4 e0       	ldi	r26, 0x04	; 4
 488:	b3 e0       	ldi	r27, 0x03	; 3
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	70 e0       	ldi	r23, 0x00	; 0
			else																		// Если ножка назначена как "Вход"
			{
				if (*pAddressPortPIN & (0x1 << Input))	
					State |= (1<<Input);
				else
					State &= ~(1<<Input);
 48e:	c1 e0       	ldi	r28, 0x01	; 1
 490:	d0 e0       	ldi	r29, 0x00	; 0
	BYTE Port = 0;
	
	while(Port != DIAG_DISCRETE_PORT_COUNT)
	{
		BYTE* pAddressPortDDR 	= AddressPort[ Port ][ DIAG_DISCRETE_PORT_TYPE_IO ];
		BYTE* pAddressPortDATA 	= AddressPort[ Port ][ DIAG_DISCRETE_PORT_TYPE_DATA ];
 492:	11 96       	adiw	r26, 0x01	; 1
 494:	8c 91       	ld	r24, X
 496:	11 97       	sbiw	r26, 0x01	; 1
 498:	e8 2e       	mov	r14, r24
 49a:	ff 24       	eor	r15, r15
		BYTE* pAddressPortPIN 	= AddressPort[ Port ][ DIAG_DISCRETE_PORT_TYPE_PIN ];
 49c:	12 96       	adiw	r26, 0x02	; 2
 49e:	8c 91       	ld	r24, X
 4a0:	12 97       	sbiw	r26, 0x02	; 2
 4a2:	08 2f       	mov	r16, r24
 4a4:	10 e0       	ldi	r17, 0x00	; 0
	
		BOOL State = 0;
		BYTE Input = 0;	
		while(Input != DIAG_DISCRETE_INPUT_COUNT)
		{
			if (*pAddressPortDDR & (0x1 << Input)) 	// Если ножка назначена как "Выход"
 4a6:	ec 91       	ld	r30, X
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	c8 2e       	mov	r12, r24
 4ae:	dd 24       	eor	r13, r13
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	24 2f       	mov	r18, r20
 4b8:	c6 01       	movw	r24, r12
 4ba:	04 2e       	mov	r0, r20
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <GetDiscreteInputsState+0x4c>
 4be:	95 95       	asr	r25
 4c0:	87 95       	ror	r24
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <GetDiscreteInputsState+0x48>
 4c6:	80 ff       	sbrs	r24, 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <GetDiscreteInputsState+0x58>
			{
				if (*pAddressPortDATA & (0x1 << Input))	
 4ca:	f7 01       	movw	r30, r14
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <GetDiscreteInputsState+0x5a>
				else
					State &= ~(1<<Input);
			}
			else																		// Если ножка назначена как "Вход"
			{
				if (*pAddressPortPIN & (0x1 << Input))	
 4ce:	f8 01       	movw	r30, r16
 4d0:	80 81       	ld	r24, Z
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 2e       	mov	r0, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <GetDiscreteInputsState+0x66>
 4d8:	95 95       	asr	r25
 4da:	87 95       	ror	r24
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <GetDiscreteInputsState+0x62>
 4e0:	80 ff       	sbrs	r24, 0
 4e2:	08 c0       	rjmp	.+16     	; 0x4f4 <GetDiscreteInputsState+0x7e>
					State |= (1<<Input);
 4e4:	ce 01       	movw	r24, r28
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <GetDiscreteInputsState+0x76>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	2a 95       	dec	r18
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <GetDiscreteInputsState+0x72>
 4f0:	38 2b       	or	r19, r24
 4f2:	08 c0       	rjmp	.+16     	; 0x504 <GetDiscreteInputsState+0x8e>
				else
					State &= ~(1<<Input);
 4f4:	ce 01       	movw	r24, r28
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <GetDiscreteInputsState+0x86>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	2a 95       	dec	r18
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <GetDiscreteInputsState+0x82>
 500:	80 95       	com	r24
 502:	38 23       	and	r19, r24
 504:	4f 5f       	subi	r20, 0xFF	; 255
 506:	5f 4f       	sbci	r21, 0xFF	; 255
		BYTE* pAddressPortDATA 	= AddressPort[ Port ][ DIAG_DISCRETE_PORT_TYPE_DATA ];
		BYTE* pAddressPortPIN 	= AddressPort[ Port ][ DIAG_DISCRETE_PORT_TYPE_PIN ];
	
		BOOL State = 0;
		BYTE Input = 0;	
		while(Input != DIAG_DISCRETE_INPUT_COUNT)
 508:	48 30       	cpi	r20, 0x08	; 8
 50a:	51 05       	cpc	r21, r1
 50c:	a1 f6       	brne	.-88     	; 0x4b6 <GetDiscreteInputsState+0x40>
			}

			Input++;
		}

		pDiagDiscreteArray[Port] = State;
 50e:	e0 91 19 03 	lds	r30, 0x0319
 512:	f0 91 1a 03 	lds	r31, 0x031A
 516:	e6 0f       	add	r30, r22
 518:	f7 1f       	adc	r31, r23
 51a:	30 83       	st	Z, r19
 51c:	6f 5f       	subi	r22, 0xFF	; 255
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	13 96       	adiw	r26, 0x03	; 3

void GetDiscreteInputsState()
{
	BYTE Port = 0;
	
	while(Port != DIAG_DISCRETE_PORT_COUNT)
 522:	67 30       	cpi	r22, 0x07	; 7
 524:	71 05       	cpc	r23, r1
 526:	09 f0       	breq	.+2      	; 0x52a <GetDiscreteInputsState+0xb4>
 528:	b4 cf       	rjmp	.-152    	; 0x492 <GetDiscreteInputsState+0x1c>
		pDiagDiscreteArray[Port] = State;
	
		Port++;
	}

}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	ff 90       	pop	r15
 534:	ef 90       	pop	r14
 536:	df 90       	pop	r13
 538:	cf 90       	pop	r12
 53a:	08 95       	ret

0000053c <SetDiscreteInputState>:
// ------------------------------------------------------------------------------
// Уставнока занчения Да/Нет на указаном выходе

void SetDiscreteInputState(BYTE Port, BYTE Input, BOOL State)
{
	BYTE* pAddressPort = AddressPort[Port][DIAG_DISCRETE_PORT_TYPE_DATA];
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	fc 01       	movw	r30, r24
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	e8 0f       	add	r30, r24
 546:	f9 1f       	adc	r31, r25
 548:	ec 5f       	subi	r30, 0xFC	; 252
 54a:	fc 4f       	sbci	r31, 0xFC	; 252
 54c:	81 81       	ldd	r24, Z+1	; 0x01
 54e:	e8 2f       	mov	r30, r24
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	20 81       	ld	r18, Z

	if(!State)
 554:	44 23       	and	r20, r20
 556:	51 f4       	brne	.+20     	; 0x56c <SetDiscreteInputState+0x30>
		*pAddressPort &= ~(1<<Input);
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <SetDiscreteInputState+0x26>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <SetDiscreteInputState+0x22>
 566:	80 95       	com	r24
 568:	28 23       	and	r18, r24
 56a:	08 c0       	rjmp	.+16     	; 0x57c <SetDiscreteInputState+0x40>
	else
		*pAddressPort |= (1<<Input);
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <SetDiscreteInputState+0x3a>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <SetDiscreteInputState+0x36>
 57a:	28 2b       	or	r18, r24
 57c:	20 83       	st	Z, r18
 57e:	08 95       	ret

00000580 <SendPortIO>:

// ------------------------------------------------------------------------------
// Отправление текужего стояния портов ввод вывода

void SendPortIO()
{
 580:	df 93       	push	r29
 582:	cf 93       	push	r28
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
 588:	27 97       	sbiw	r28, 0x07	; 7
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	f8 94       	cli
 58e:	de bf       	out	0x3e, r29	; 62
 590:	0f be       	out	0x3f, r0	; 63
 592:	cd bf       	out	0x3d, r28	; 61
 594:	a4 e0       	ldi	r26, 0x04	; 4
 596:	b3 e0       	ldi	r27, 0x03	; 3
 598:	9e 01       	movw	r18, r28
 59a:	2f 5f       	subi	r18, 0xFF	; 255
 59c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	while(Port != DIAG_DISCRETE_PORT_COUNT)
	{
		BYTE* pAddressPortDDR  = AddressPort[ Port ][ DIAG_DISCRETE_PORT_TYPE_IO ];
	
		PortIO[Port] = *pAddressPortDDR ;
 59e:	ec 91       	ld	r30, X
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	f9 01       	movw	r30, r18
 5a6:	81 93       	st	Z+, r24
 5a8:	9f 01       	movw	r18, r30
 5aa:	13 96       	adiw	r26, 0x03	; 3
{

	BYTE PortIO[DIAG_DISCRETE_PORT_COUNT];
	BYTE Port = 0;
	
	while(Port != DIAG_DISCRETE_PORT_COUNT)
 5ac:	f3 e0       	ldi	r31, 0x03	; 3
 5ae:	a9 31       	cpi	r26, 0x19	; 25
 5b0:	bf 07       	cpc	r27, r31
 5b2:	a9 f7       	brne	.-22     	; 0x59e <SendPortIO+0x1e>
		PortIO[Port] = *pAddressPortDDR ;
	
		Port++;
	}

	SendData(PortIO, DIAG_DISCRETE_PORT_COUNT, MSG_TYPE_DATA_PORT_IO);
 5b4:	ce 01       	movw	r24, r28
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	67 e0       	ldi	r22, 0x07	; 7
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SendData>
}
 5c0:	27 96       	adiw	r28, 0x07	; 7
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	cf 91       	pop	r28
 5ce:	df 91       	pop	r29
 5d0:	08 95       	ret

000005d2 <__vector_16>:

// ------------------------------------------------------------------------------
// Пререывание по таймеру 1

ISR (TIMER0_OVF_vect)	
{
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	0b b6       	in	r0, 0x3b	; 59
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	2f 93       	push	r18
 5e2:	3f 93       	push	r19
 5e4:	4f 93       	push	r20
 5e6:	5f 93       	push	r21
 5e8:	6f 93       	push	r22
 5ea:	7f 93       	push	r23
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25
 5f0:	af 93       	push	r26
 5f2:	bf 93       	push	r27
 5f4:	ef 93       	push	r30
 5f6:	ff 93       	push	r31
	
	// когда количество тиков достигает пол секунды
	if (Tick0Count == HALF_SECOND_TICK_COUNT)
 5f8:	80 91 1f 03 	lds	r24, 0x031F
 5fc:	8e 31       	cpi	r24, 0x1E	; 30
 5fe:	11 f4       	brne	.+4      	; 0x604 <__vector_16+0x32>
		GetDiscreteInputsState();
 600:	0e 94 3b 02 	call	0x476	; 0x476 <GetDiscreteInputsState>

	// когда количество тиков достигает одной секунды
	if (Tick0Count == ONE_SECOND_TICK_COUNT)
 604:	80 91 1f 03 	lds	r24, 0x031F
 608:	8c 33       	cpi	r24, 0x3C	; 60
 60a:	71 f4       	brne	.+28     	; 0x628 <__vector_16+0x56>
	{
		SendData(DiagArray, DIAG_ARRAY_LEN, MSG_TYPE_DATA_PORT_STATE);
 60c:	81 e6       	ldi	r24, 0x61	; 97
 60e:	94 e0       	ldi	r25, 0x04	; 4
 610:	6f e0       	ldi	r22, 0x0F	; 15
 612:	41 e0       	ldi	r20, 0x01	; 1
 614:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SendData>
		
		PORTG ^= 0x10;
 618:	80 91 65 00 	lds	r24, 0x0065
 61c:	90 e1       	ldi	r25, 0x10	; 16
 61e:	89 27       	eor	r24, r25
 620:	80 93 65 00 	sts	0x0065, r24
		Tick0Count = 0;
 624:	10 92 1f 03 	sts	0x031F, r1
	}


	Tick0Count++;
 628:	80 91 1f 03 	lds	r24, 0x031F
 62c:	8f 5f       	subi	r24, 0xFF	; 255
 62e:	80 93 1f 03 	sts	0x031F, r24
}
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	0f 90       	pop	r0
 64c:	0b be       	out	0x3b, r0	; 59
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	0f 90       	pop	r0
 654:	1f 90       	pop	r1
 656:	18 95       	reti

00000658 <__eerd_byte_m128>:
 658:	e1 99       	sbic	0x1c, 1	; 28
 65a:	fe cf       	rjmp	.-4      	; 0x658 <__eerd_byte_m128>
 65c:	9f bb       	out	0x1f, r25	; 31
 65e:	8e bb       	out	0x1e, r24	; 30
 660:	e0 9a       	sbi	0x1c, 0	; 28
 662:	99 27       	eor	r25, r25
 664:	8d b3       	in	r24, 0x1d	; 29
 666:	08 95       	ret

00000668 <__eewr_byte_m128>:
 668:	26 2f       	mov	r18, r22

0000066a <__eewr_r18_m128>:
 66a:	e1 99       	sbic	0x1c, 1	; 28
 66c:	fe cf       	rjmp	.-4      	; 0x66a <__eewr_r18_m128>
 66e:	9f bb       	out	0x1f, r25	; 31
 670:	8e bb       	out	0x1e, r24	; 30
 672:	2d bb       	out	0x1d, r18	; 29
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	f8 94       	cli
 678:	e2 9a       	sbi	0x1c, 2	; 28
 67a:	e1 9a       	sbi	0x1c, 1	; 28
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	08 95       	ret

00000682 <_exit>:
 682:	f8 94       	cli

00000684 <__stop_program>:
 684:	ff cf       	rjmp	.-2      	; 0x684 <__stop_program>
